#!/usr/bin/env bash

base=$(basename "$0")

default=""

input=$default
fg_color=$default
bg_color=$default
style=$default

is_default() { [ "$1" = "$default" ]; }

usage() {
  cat <<EOF
Usage: $base [options]

Available options:
  -h    Print this help and exit
  -t    Text to print
  -f    Foreground color (default: 0)
  -b    Background color (default: 0)
  -s    Style (default: 0)

Available styles:
  bold
  dim
  italic
  underline
  curly-underline
  blink
  reverse
  strikethrough

Examples:
  $base -t 'Hello, World!'
  $base -t 'Hello, World!' -f 1 -b 2 -s bold
  $base -t 'Hello, World!' -f 1 -b 2 -s bold -s italic
  echo 'Hello, World!' | $base -f 1 -b 2 -s bold -s bold

EOF
}

debug() {
  local debug=${DEBUG:-}
  if [ "$debug" = "*" ] || [[ "$debug" =~ (^|,)"$base"($|,) ]]; then
    echo "[debug.$base] $1"
  fi
}

read_stdin() { [ -t 0 ] || cat; }

main() {
  input=${input:-$(read_stdin)}

  if [ -z "$input" ]; then
    usage
    exit 1
  fi

  debug "Options
    input    $input
    fg_color $fg_color
    bg_color $bg_color
    style    $style
  "

  local style_code=""
  if ! is_default "$style"; then
    for s in $(echo "$style" | tr ";" "\n"); do
      case $s in
      bold) style_code+=";1" ;;
      dim) style_code+=";2" ;;
      italic) style_code+=";3" ;;
      underline) style_code+=";4" ;;
      # double-underline) style_code+=";4:21" ;;
      curly-underline) style_code+=";4:3" ;;
      # dotted-underline) style_code+=";4:4" ;;
      # dashed-underline) style_code+=";4:5" ;;
      blink) style_code+=";5" ;;
      reverse) style_code+=";7" ;;
      # invisible) style_code+=";8" ;;
      strikethrough) style_code+=";9" ;;
      # overline) style_code+=";53" ;;
      *) style_code+="" ;;
      esac
    done
  fi

  local color_code=""
  if ! is_default "$fg_color"; then
    color_code+="38;5;$fg_color"
  fi

  if ! is_default "$bg_color"; then
    [ -n "$color_code" ] && color_code+=";"
    color_code+="48;5;$bg_color"
  fi

  result="\e[${color_code}${style_code}m$input\e[0m\n"
  debug "Raw Result
    $(printf "%s" "$result")
  "

  printf "$result"
}

while getopts ":ht:f:b:s:-:" opt; do
  case $opt in
  h)
    usage
    exit 0
    ;;
  t) input=$OPTARG ;;
  f) fg_color=$OPTARG ;;
  b) bg_color=$OPTARG ;;
  s) style+="$OPTARG;" ;;
  \?)
    echo "Invalid option: -$OPTARG" >&2
    exit 1
    ;;
  :)
    echo "Option -$OPTARG requires an argument." >&2
    exit 1
    ;;
  esac
done

main "$@"
